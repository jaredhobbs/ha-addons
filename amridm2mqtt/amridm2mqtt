#!/usr/bin/env python3
"""
Runs rtlamr to watch for IDM and SCM+ broadcasts from utility meter.
If meter id is in the list, usage is sent to the
'readings/<meter id>/meter_reading' topic on the MQTT broker specified in
settings.
WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.
"""
import json
import logging
import os
import signal
import subprocess
import sys
import time

import paho.mqtt.publish as publish

import settings

DEBUG = os.environ.get('DEBUG', '').lower() in ['1', 'true', 't']
logging.basicConfig(level=logging.DEBUG if DEBUG else logging.INFO)
logger = logging.getLogger(__name__)

# stores last interval id to avoid duplication, includes getter and setter
last_reading = {}

auth = None
if settings.MQTT_USER and settings.MQTT_PASSWORD:
    auth = {
        'username': settings.MQTT_USER,
        'password': settings.MQTT_PASSWORD,
    }


# uses signal to shutdown and hard kill opened processes and self
def shutdown(signum, frame):
    rtltcp.send_signal(15)
    rtlamr.send_signal(15)
    time.sleep(1)
    rtltcp.send_signal(9)
    rtlamr.send_signal(9)
    sys.exit(0)


signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)


def get_last_interval(meter_id):
    return last_reading.get(meter_id, None)


def set_last_interval(meter_id, interval_id):
    last_reading[meter_id] = interval_id


# send data to MQTT broker defined in settings
def send_mqtt(topic, payload,):
    try:
        publish.single(
            topic,
            payload=payload,
            qos=1,
            hostname=settings.MQTT_HOST,
            port=settings.MQTT_PORT,
            auth=auth,
        )
    except Exception:
        logger.exception('MQTT Publish Failed')

# start the rtl_tcp program
rtltcp = subprocess.Popen(
    [settings.RTL_TCP + " > /dev/null 2>&1 &"],
    shell=True,
    stdin=None,
    stdout=None,
    stderr=None,
    close_fds=True,
)
time.sleep(5)

# start the rtlamr program.
rtlamr_cmd = [settings.RTLAMR, '-msgtype=all', '-format=json']
rtlamr = subprocess.Popen(
    rtlamr_cmd,
    stdout=subprocess.PIPE,
    universal_newlines=True,
)


def process_idm(data):
    # make sure the meter id is one we want
    meter_id = data['Message']['ERTSerialNumber']
    if settings.WATCHED_METERS and meter_id not in settings.WATCHED_METERS:
        return

    # get some required info: current meter reading, current interval id,
    # most recent interval usage
    read_cur = data['Message']['LastConsumptionCount']
    interval_cur = data['Message']['ConsumptionIntervalCount']
    idm_read_cur = data['Message']['DifferentialConsumptionIntervals'][0]

    # retrieve the interval id of the last time we sent to MQTT
    interval_last = get_last_interval(meter_id)

    if interval_cur != interval_last:
        # as observed on my meter...
        # using values set in settings...
        # each idm interval is 5 minutes (12x per hour),
        # measured in hundredths of a kilowatt-hour
        # take the last interval usage times 10 to get watt-hours,
        # then times 12 to get average usage in watts
        rate = (
           idm_read_cur
           * settings.WH_MULTIPLIER
           * settings.READINGS_PER_HOUR
        )
        current_reading_in_kwh = (read_cur * settings.WH_MULTIPLIER) / 1000

        logger.debug(
            'Sending meter %s reading: %s',
            meter_id,
            current_reading_in_kwh,
        )
        send_mqtt(
            f'readings/{meter_id}/meter_reading',
            f'{current_reading_in_kwh}',
        )

        logger.debug('Sending meter %s rate: %s', meter_id, rate)
        send_mqtt(f'readings/{meter_id}/meter_rate', f'{rate}')

        # store interval ID to avoid duplicating data
        set_last_interval(meter_id, interval_cur)


def process_scm_plus(data):
    # make sure the meter id is one we want
    meter_id = data['Message']['EndpointID']
    if settings.WATCHED_METERS and meter_id not in settings.WATCHED_METERS:
        return
    read_cur = data['Message']['Consumption']
    current_reading_in_cf = (read_cur * settings.WH_MULTIPLIER) / 1000
    logger.debug(
        'Sending meter %s reading: %s',
        meter_id,
        current_reading_in_cf,
    )
    send_mqtt(
        f'readings/{meter_id}/meter_reading',
        f'{current_reading_in_cf}',
    )


while True:
    try:
        amrline = rtlamr.stdout.readline().strip()
        if not amrline and rtlamr.poll() is not None:
            break
        try:
            data = json.loads(amrline)
        except Exception as e:
            logger.debug('json load exception ignored: %s', e)
            continue

        logger.debug('Data received: %s', data)

        data_type = data['Type']
        if data_type == 'IDM':
            process_idm(data)
        elif data_type == 'SCM+':
            process_scm_plus(data)
    except Exception as e:
        logger.debug('Exception squashed! %s: %s', e.__class__.__name__, e)
        time.sleep(2)
